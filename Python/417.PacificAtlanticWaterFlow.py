from typing import List

class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        m, n = len(heights), len(heights[0])
        atlantic = set()
        pacific = set()
        ocean = None
        def bfs(row: int, col: int, prev: int):
            if row < 0 or row == m or col < 0 or col == n or (val := heights[row][col]) < prev or (row, col) in ocean:
                return
            
            ocean.add((row, col))
            bfs(row - 1, col, val)
            bfs(row + 1, col, val)
            bfs(row, col - 1, val)
            bfs(row, col + 1, val)
            
        for row in range(m):
            ocean = pacific
            bfs(row, 0, heights[row][0])
            ocean = atlantic
            bfs(row, n - 1, heights[row][n-1])
        
        for col in range(n):
            ocean = pacific
            bfs(0, col, heights[0][col])
            ocean = atlantic
            bfs(m - 1, col, heights[m-1][col])

        res = atlantic & pacific
                
        return res
        


if __name__ == "__main__":
    sol = Solution()
    tests = [
        ([[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]], [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]),
        ([[1]], [[0,0]]),
        ([[1,2,3,4,5,6,7,8,9,10,11,12,13],[48,49,50,51,52,53,54,55,56,57,58,59,14],[47,88,89,90,91,92,93,94,95,96,97,60,15],[46,87,120,121,122,123,124,125,126,127,98,61,16],[45,86,119,144,145,146,147,148,149,128,99,62,17],[44,85,118,143,160,161,162,163,150,129,100,63,18],[43,84,117,142,159,168,169,164,151,130,101,64,19],[42,83,116,141,158,167,166,165,152,131,102,65,20],[41,82,115,140,157,156,155,154,153,132,103,66,21],[40,81,114,139,138,137,136,135,134,133,104,67,22],[39,80,113,112,111,110,109,108,107,106,105,68,23],[38,79,78,77,76,75,74,73,72,71,70,69,24],[37,36,35,34,33,32,31,30,29,28,27,26,25]], [[12, 4], [4, 0], [4, 9], [5, 1], [8, 0], [5, 10], [8, 9], [10, 6], [9, 8], [11, 5], [2, 2], [2, 11], [6, 2], [7, 1], [6, 11], [7, 10], [4, 2], [3, 6], [5, 3], [8, 2], [9, 1], [5, 12], [8, 11], [9, 10], [11, 7], [2, 4], [1, 8], [6, 4], [7, 3], [7, 12], [3, 8], [5, 5], [8, 4], [9, 3], [11, 0], [9, 12], [11, 9], [1, 10], [6, 6], [7, 5], [3, 1], [3, 10], [5, 7], [9, 5], [11, 2], [1, 3], [1, 12], [7, 7], [12, 6], [3, 3], [5, 0], [3, 12], [5, 9], [4, 11], [9, 7], [11, 4], [10, 8], [1, 5], [6, 1], [7, 0], [7, 9], [12, 8], [3, 5], [5, 2], [4, 4], [9, 0], [5, 11], [9, 9], [10, 1], [10, 10], [1, 7], [2, 6], [7, 2], [7, 11], [12, 1], [12, 10], [3, 7], [5, 4], [4, 6], [9, 2], [8, 6], [10, 3], [1, 0], [10, 12], [1, 9], [11, 11], [2, 8], [7, 4], [6, 8], [12, 3], [3, 0], [12, 12], [3, 9], [5, 6], [4, 8], [8, 8], [10, 5], [1, 2], [2, 1], [1, 11], [2, 10], [6, 10], [12, 5], [3, 2], [4, 1], [3, 11], [4, 10], [8, 1], [8, 10], [10, 7], [1, 4], [11, 6], [2, 3], [2, 12], [6, 3], [6, 12], [12, 7], [3, 4], [4, 3], [4, 12], [8, 3], [10, 0], [8, 12], [10, 9], [1, 6], [9, 11], [2, 5], [11, 8], [6, 5], [12, 0], [12, 9], [4, 5], [8, 5], [10, 2], [9, 4], [11, 1], [10, 11], [11, 10], [2, 7], [6, 7], [7, 6], [12, 2], [12, 11], [4, 7], [5, 8], [8, 7], [10, 4], [1, 1], [9, 6], [2, 0], [11, 3], [0, 12], [2, 9], [11, 12], [6, 0], [6, 9], [7, 8]]),
        ([[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],[68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,19],[67,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,85,20],[66,127,180,181,182,183,184,185,186,187,188,189,190,191,192,143,86,21],[65,126,179,224,225,226,227,228,229,230,231,232,233,234,193,144,87,22],[64,125,178,223,260,261,262,263,264,265,266,267,268,235,194,145,88,23],[63,124,177,222,259,288,289,290,291,292,293,294,269,236,195,146,89,24],[62,123,176,221,258,287,308,309,310,311,312,295,270,237,196,147,90,25],[61,122,175,220,257,286,307,320,321,322,313,296,271,238,197,148,91,26],[60,121,174,219,256,285,306,319,324,323,314,297,272,239,198,149,92,27],[59,120,173,218,255,284,305,318,317,316,315,298,273,240,199,150,93,28],[58,119,172,217,254,283,304,303,302,301,300,299,274,241,200,151,94,29],[57,118,171,216,253,282,281,280,279,278,277,276,275,242,201,152,95,30],[56,117,170,215,252,251,250,249,248,247,246,245,244,243,202,153,96,31],[55,116,169,214,213,212,211,210,209,208,207,206,205,204,203,154,97,32],[54,115,168,167,166,165,164,163,162,161,160,159,158,157,156,155,98,33],[53,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,34],[52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35]], [[7, 17], [8, 0], [8, 9], [11, 5], [11, 14], [4, 2], [3, 6], [3, 15], [14, 15], [15, 7], [7, 3], [15, 16], [7, 12], [8, 4], [11, 0], [11, 9], [3, 1], [14, 1], [3, 10], [14, 10], [15, 2], [15, 11], [7, 7], [7, 16], [11, 4], [10, 8], [10, 17], [2, 13], [3, 5], [14, 5], [3, 14], [14, 14], [15, 6], [7, 2], [7, 11], [6, 15], [10, 3], [10, 12], [2, 8], [2, 17], [3, 0], [14, 0], [3, 9], [14, 9], [6, 10], [10, 7], [2, 3], [10, 16], [2, 12], [3, 4], [14, 4], [17, 6], [17, 15], [9, 11], [6, 5], [6, 14], [10, 2], [10, 11], [2, 7], [2, 16], [13, 13], [17, 1], [17, 10], [5, 8], [9, 6], [5, 17], [9, 15], [6, 0], [6, 9], [10, 6], [2, 2], [2, 11], [13, 8], [1, 15], [13, 17], [16, 13], [5, 3], [17, 5], [9, 1], [5, 12], [17, 14], [9, 10], [6, 4], [6, 13], [13, 3], [1, 10], [13, 12], [16, 8], [16, 17], [17, 0], [5, 7], [17, 9], [9, 5], [5, 16], [9, 14], [12, 6], [12, 15], [4, 11], [1, 5], [13, 7], [16, 3], [1, 14], [13, 16], [16, 12], [17, 4], [5, 2], [9, 0], [5, 11], [9, 9], [8, 13], [12, 1], [12, 10], [4, 6], [4, 15], [1, 0], [13, 2], [1, 9], [13, 11], [16, 7], [16, 16], [5, 6], [8, 8], [8, 17], [11, 13], [12, 5], [4, 1], [12, 14], [4, 10], [1, 4], [16, 2], [1, 13], [15, 15], [8, 3], [8, 12], [11, 8], [0, 17], [11, 17], [12, 0], [12, 9], [4, 5], [4, 14], [15, 1], [15, 10], [7, 6], [7, 15], [8, 7], [11, 3], [8, 16], [11, 12], [12, 4], [4, 0], [4, 9], [3, 13], [14, 13], [15, 5], [7, 1], [15, 14], [7, 10], [8, 2], [8, 11], [11, 7], [11, 16], [3, 8], [14, 8], [3, 17], [14, 17], [15, 0], [15, 9], [7, 5], [7, 14], [11, 2], [10, 15], [3, 3], [14, 3], [3, 12], [14, 12], [15, 4], [7, 0], [15, 13], [7, 9], [10, 1], [10, 10], [2, 6], [2, 15], [3, 7], [14, 7], [3, 16], [14, 16], [7, 4], [6, 8], [6, 17], [10, 5], [2, 1], [10, 14], [2, 10], [3, 2], [14, 2], [3, 11], [14, 11], [17, 13], [6, 3], [6, 12], [10, 0], [10, 9], [2, 5], [2, 14], [14, 6], [17, 8], [9, 4], [5, 15], [17, 17], [9, 13], [6, 7], [6, 16], [10, 4], [2, 0], [10, 13], [2, 9], [13, 6], [13, 15], [16, 11], [5, 1], [17, 3], [5, 10], [17, 12], [9, 8], [9, 17], [6, 2], [6, 11], [2, 4], [13, 1], [1, 8], [13, 10], [16, 6], [1, 17], [16, 15], [5, 5], [17, 7], [9, 3], [5, 14], [17, 16], [9, 12], [6, 6], [12, 13], [1, 3], [13, 5], [16, 1], [1, 12], [13, 14], [16, 10], [5, 0], [17, 2], [5, 9], [17, 11], [9, 7], [9, 16], [6, 1], [12, 8], [4, 4], [12, 17], [4, 13], [13, 0], [1, 7], [13, 9], [16, 5], [1, 16], [16, 14], [5, 4], [9, 2], [5, 13], [8, 6], [8, 15], [11, 11], [12, 3], [12, 12], [4, 8], [4, 17], [1, 2], [13, 4], [16, 0], [1, 11], [16, 9], [8, 1], [8, 10], [11, 6], [11, 15], [12, 7], [4, 3], [12, 16], [4, 12], [1, 6], [16, 4], [15, 8], [15, 17], [7, 13], [8, 5], [11, 1], [8, 14], [11, 10], [12, 2], [12, 11], [4, 7], [4, 16], [1, 1], [15, 3], [15, 12], [7, 8]])
    ]
    
    passed_all = True
    test_only = 0
    for i, test in enumerate(tests, 1):
        if test_only and test_only != i:
            continue
        heights, expected = test
        actual = sol.pacificAtlantic(heights)
        diff = [coord for coord in expected if coord not in actual] + [coord for coord in actual if coord not in expected]
        if diff:
            print(f"Test {i} Failed")
            print(f"\tActual  : {actual}")
            print(f"\tExpected: {expected}")
            print(f"\tDiff    : {diff}")
            passed_all = False
    
    if passed_all:
        print("All Tests Passed")

# ---------------------------- Other Solutions --------------------------------